@page "/customers"
@using Web.Shared
@using Web.Shared.Dtos;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<a href="customers/add">
    <button class="btn btn-primary" type="button">Add Customer</button>
</a>
@if (_customerGetAllDtos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover mt-5">
        <thead>
            <tr>
                <th>Customer Name</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in _customerGetAllDtos)
            {
                <tr>
                    <td>@customer.Name</td>
                    <td>
                        <a href="customers/update/@customer.Id">
                            <button class="btn btn-info" type="button">Update</button>
                        </a>
                        <button class="btn btn-danger" type="button" @onclick="(async ()=>await DeleteAsync(customer.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CustomerGetAllDto>? _customerGetAllDtos;

    protected override async Task OnInitializedAsync()
    {
        _customerGetAllDtos = await Http.GetFromJsonAsync<List<CustomerGetAllDto>>("Api/Customer");
    }

    protected async Task DeleteAsync(long id)
    {
        var response = await Http.DeleteAsync($"Api/Customer/{id}");
        if (response.IsSuccessStatusCode)
            NavigationManager.NavigateTo("customers", true);
        else
            await JsRuntime.InvokeVoidAsync("alert", await response.Content.ReadAsStringAsync());
    }
}
